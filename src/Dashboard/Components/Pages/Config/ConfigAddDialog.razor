@using FlowSynx.Client
@using FlowSynx.Client.Requests.Config
@using FlowSynx.Client.Requests.Plugins
@using FlowSynx.Client.Responses.Plugins
@using System.Xml.Linq

@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" /> Add new config
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" md="12">
                <MudTextField For="@(() => AddConfigRequest.Name)" @bind-Value="AddConfigRequest.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Dense" HelperText="Enter the name of config item" />
            </MudItem>
            <MudItem xs="12" md="12">
                <MudAutocomplete T="string" Label="Plugin Type" For="@(() => AddConfigRequest.Type)" @bind-Value="AddConfigRequest.Type" ResetValueOnEmptyText="true" SearchFunc="@SearchPluginTypes" Variant="Variant.Text" Margin="Margin.Dense" ToStringFunc="@(i => _pluginTypes.FirstOrDefault(b => b.Type == i)?.Type ?? string.Empty)" OffsetY="true" HelperText="Enter the type of config item" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton DisableElevation Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="Cancel">Cancel</MudButton>
        <MudButton DisableElevation Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public required AddConfigRequest AddConfigRequest { get; set; } = new AddConfigRequest
    {
        Name = "",
        Type = ""
    };

    private IEnumerable<PluginsListResponse> _pluginTypes = new List<PluginsListResponse>();

    void Close() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        await LoadPluginTypes();
    }

    private async Task LoadPluginTypes()
    {
        var result = await FlowSynxClient.PluginsList(new PluginsListRequest());
        if (!result.Succeeded)
        {
            foreach (var message in result.Messages)
            {
                SnackBar.Add(message, Severity.Error);
            }
            Cancel();
        }
        
        _pluginTypes = result.Data;
    }

    private async Task<IEnumerable<string>> SearchPluginTypes(string value)
    {
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return _pluginTypes.Select(x => x.Type);

        return _pluginTypes.Where(x => x.Description != null && x.Description.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Type);
    }

    private async Task Save()
    {
        var result = await FlowSynxClient.AddConfig(AddConfigRequest);
        if (!result.Succeeded)
        {
            foreach (var message in result.Messages)
            {
                SnackBar.Add(message, Severity.Error);
            }
        }
        else
        {
            SnackBar.Add("Config added successfully!", Severity.Success);
            Close();
        }
    }
}