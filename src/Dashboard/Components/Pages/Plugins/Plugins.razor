@page "/plugins"
@using FlowSynx.Client
@using FlowSynx.Client.Requests.Plugins
@using FlowSynx.Client.Responses.Plugins
@using Microsoft.AspNetCore.Components

@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar

<PageTitle>FlowSynx Plugins</PageTitle>

<HeaderTitle Title="Plugins list" Description="List of plugins supported by FlowSynx system" />

<MudExpansionPanels>
    <MudExpansionPanel Text="Query">
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudTextField @bind-Value="Request.Include" Label="Include" Variant="Variant.Text" Margin="Margin.Dense" HelperText="Include plugins matching pattern"></MudTextField>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField @bind-Value="Request.Exclude" Label="Exclude" Variant="Variant.Text" Margin="Margin.Dense" HelperText="Exclude plugins matching pattern"></MudTextField>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudCheckBox @bind-Value="Request.CaseSensitive" Label="Ignore/Apply case sensitive in filters"></MudCheckBox>
            </MudItem>
            <MudFlexBreak />
            <MudItem xs="12" md="4">
                <MudTextField @bind-Value="Request.Sorting" Label="Sorting" Variant="Variant.Text" Margin="Margin.Dense" HelperText="Sorting plugins based on field name and ascending and descending. Like Property ASC, Property2 DESC"></MudTextField>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField @bind-Value="Request.MaxResults" Label="Maximum results" Variant="Variant.Text" Margin="Margin.Dense" HelperText="The maximum number of results to return"></MudTextField>
            </MudItem>
            <MudFlexBreak />
            <MudItem xs="12" md="12">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" Color="Color.Primary" Size="Size.Small" OnClick="OnSearch">Process</MudButton>
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>
</MudExpansionPanels>
<br />
<MudTable ServerData="LoadData" Dense="true" Hover="true" Bordered="false" Striped="false" @ref="_table" LoadingProgressColor="Color.Primary">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Description</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name"><b>@context.Type</b></MudTd>
        <MudTd DataLabel="Type">@context.Description</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private readonly CancellationTokenSource _cts = new();
    private PluginsListRequest? Request { get; set; } = new PluginsListRequest();
    private MudTable<PluginsListResponse>? _table;

    private async Task<TableData<PluginsListResponse>> LoadData(TableState state)
    {
        IEnumerable<PluginsListResponse> response = new List<PluginsListResponse>();
        if (Request != null)
        {
            var result = await FlowSynxClient.PluginsList(Request, _cts.Token);
            if (result.StatusCode != 200)
                SnackBar.Add("It seems there is an error occurred during processing the request.", Severity.Error);

            var payload = result.Payload;
            if (payload.Succeeded)
            {
                response = payload.Data;
            }
            else
            {
                foreach (var message in payload.Messages)
                {
                    SnackBar.Add(message, Severity.Error);
                }
            }
        }

        var configListResponses = response.ToList();
        return new TableData<PluginsListResponse>
            {
                Items = configListResponses,
                TotalItems = configListResponses.Count()
            };
    }

    private async void OnSearch()
    {
        if (_table != null)
            await _table.ReloadServerData();
    }
}